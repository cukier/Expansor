CCS PCH C Compiler, Version 5.008, 5967               13-fev-15 11:17

               Filename:   D:\Projetos\Expansor\expansor.lst

               ROM used:   1450 bytes (4%)
                           Largest free fragment is 31318
               RAM used:   1290 (84%) at main() level
                           1300 (85%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0000:  GOTO   03A8
.................... /* 
....................  * expansor.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
0004:  DATA 0A,0D
0006:  DATA 4D,75
0008:  DATA 69,74
000A:  DATA 6F,73
000C:  DATA 20,64
000E:  DATA 69,73
0010:  DATA 70,6F
0012:  DATA 69,73
0014:  DATA 69,74
0016:  DATA 69,76
0018:  DATA 6F,73
001A:  DATA 20,25
001C:  DATA 64,0A
001E:  DATA 0D,00
0020:  DATA 0A,0D
0022:  DATA 45,6E
0024:  DATA 63,6F
0026:  DATA 6E,74
0028:  DATA 72,61
002A:  DATA 64,6F
002C:  DATA 73,20
002E:  DATA 25,75
0030:  DATA 0A,0D
0032:  DATA 44,69
0034:  DATA 73,70
0036:  DATA 09,00
0038:  DATA 20,20
003A:  DATA 30,78
003C:  DATA 25,78
003E:  DATA 00,00
0040:  DATA 72,65
0042:  DATA 67,20
0044:  DATA 30,78
0046:  DATA 25,78
0048:  DATA 20,20
004A:  DATA 00,00
*
010E:  TBLRD*+
0110:  MOVFF  FF6,50A
0114:  MOVFF  FF7,50B
0118:  MOVF   FF5,W
011A:  BTFSS  F9E.4
011C:  BRA    011A
011E:  MOVWF  FAD
0120:  MOVFF  50A,FF6
0124:  MOVFF  50B,FF7
0128:  MOVLB  5
012A:  DECFSZ x09,F
012C:  BRA    0130
012E:  BRA    0134
0130:  MOVLB  0
0132:  BRA    010E
0134:  MOVLB  0
0136:  RETURN 0
0138:  MOVLB  5
013A:  MOVF   x0F,W
013C:  CLRF   01
013E:  SUBWF  x0E,W
0140:  BC    0148
0142:  MOVFF  50E,00
0146:  BRA    0160
0148:  CLRF   00
014A:  MOVLW  08
014C:  MOVWF  x10
014E:  RLCF   x0E,F
0150:  RLCF   00,F
0152:  MOVF   x0F,W
0154:  SUBWF  00,W
0156:  BTFSC  FD8.0
0158:  MOVWF  00
015A:  RLCF   01,F
015C:  DECFSZ x10,F
015E:  BRA    014E
0160:  MOVLB  0
0162:  RETURN 0
0164:  MOVLW  20
0166:  MOVLB  5
0168:  BTFSS  x09.4
016A:  MOVLW  30
016C:  MOVWF  x0A
016E:  MOVFF  508,00
0172:  BTFSS  x08.7
0174:  BRA    0186
0176:  COMF   00,F
0178:  INCF   00,F
017A:  MOVFF  00,508
017E:  MOVLW  2D
0180:  MOVWF  x0A
0182:  BSF    x09.7
0184:  BSF    x09.0
0186:  MOVF   01,W
0188:  MOVFF  508,50E
018C:  MOVLW  64
018E:  MOVWF  x0F
0190:  MOVLB  0
0192:  RCALL  0138
0194:  MOVFF  00,508
0198:  MOVLW  30
019A:  ADDWF  01,W
019C:  MOVLB  5
019E:  MOVWF  x0B
01A0:  MOVFF  508,50E
01A4:  MOVLW  0A
01A6:  MOVWF  x0F
01A8:  MOVLB  0
01AA:  RCALL  0138
01AC:  MOVLW  30
01AE:  ADDWF  00,W
01B0:  MOVLB  5
01B2:  MOVWF  x0D
01B4:  MOVLW  30
01B6:  ADDWF  01,W
01B8:  MOVWF  x0C
01BA:  MOVFF  50A,00
01BE:  MOVLW  30
01C0:  SUBWF  x0B,W
01C2:  BZ    01CC
01C4:  BSF    x09.1
01C6:  BTFSC  x09.7
01C8:  BSF    x09.2
01CA:  BRA    01F0
01CC:  MOVFF  50A,50B
01D0:  MOVLW  20
01D2:  MOVWF  x0A
01D4:  MOVLW  30
01D6:  SUBWF  x0C,W
01D8:  BZ    01E2
01DA:  BSF    x09.0
01DC:  BTFSC  x09.7
01DE:  BSF    x09.1
01E0:  BRA    01F0
01E2:  BTFSS  FD8.2
01E4:  BSF    x09.0
01E6:  BNZ   01F0
01E8:  MOVFF  50B,50C
01EC:  MOVLW  20
01EE:  MOVWF  x0B
01F0:  BTFSC  x09.2
01F2:  BRA    01FE
01F4:  BTFSC  x09.1
01F6:  BRA    0206
01F8:  BTFSC  x09.0
01FA:  BRA    020E
01FC:  BRA    0216
01FE:  MOVF   x0A,W
0200:  BTFSS  F9E.4
0202:  BRA    0200
0204:  MOVWF  FAD
0206:  MOVF   x0B,W
0208:  BTFSS  F9E.4
020A:  BRA    0208
020C:  MOVWF  FAD
020E:  MOVF   x0C,W
0210:  BTFSS  F9E.4
0212:  BRA    0210
0214:  MOVWF  FAD
0216:  MOVF   x0D,W
0218:  BTFSS  F9E.4
021A:  BRA    0218
021C:  MOVWF  FAD
021E:  MOVLB  0
0220:  GOTO   0408 (RETURN)
0224:  MOVF   01,W
0226:  MOVFF  508,50E
022A:  MOVLW  64
022C:  MOVLB  5
022E:  MOVWF  x0F
0230:  MOVLB  0
0232:  RCALL  0138
0234:  MOVFF  00,508
0238:  MOVF   01,W
023A:  MOVLW  30
023C:  BNZ   024E
023E:  MOVLB  5
0240:  BTFSS  x09.1
0242:  BRA    0260
0244:  BTFSC  x09.3
0246:  BRA    0260
0248:  BTFSC  x09.4
024A:  MOVLW  20
024C:  BRA    0256
024E:  MOVLB  5
0250:  BCF    x09.3
0252:  BCF    x09.4
0254:  BSF    x09.0
0256:  ADDWF  01,F
0258:  MOVF   01,W
025A:  BTFSS  F9E.4
025C:  BRA    025A
025E:  MOVWF  FAD
0260:  MOVFF  508,50E
0264:  MOVLW  0A
0266:  MOVWF  x0F
0268:  MOVLB  0
026A:  RCALL  0138
026C:  MOVFF  00,508
0270:  MOVF   01,W
0272:  MOVLW  30
0274:  BNZ   0286
0276:  MOVLB  5
0278:  BTFSC  x09.3
027A:  BRA    0292
027C:  BTFSS  x09.0
027E:  BRA    0292
0280:  BTFSC  x09.4
0282:  MOVLW  20
0284:  MOVLB  0
0286:  ADDWF  01,F
0288:  MOVF   01,W
028A:  BTFSS  F9E.4
028C:  BRA    028A
028E:  MOVWF  FAD
0290:  MOVLB  5
0292:  MOVLW  30
0294:  ADDWF  x08,F
0296:  MOVF   x08,W
0298:  BTFSS  F9E.4
029A:  BRA    0298
029C:  MOVWF  FAD
029E:  MOVLB  0
02A0:  GOTO   043E (RETURN)
02A4:  MOVLB  5
02A6:  MOVF   x09,W
02A8:  MULWF  x0B
02AA:  MOVFF  FF3,01
02AE:  MOVFF  FF4,00
02B2:  MULWF  x0C
02B4:  MOVF   FF3,W
02B6:  ADDWF  00,F
02B8:  MOVF   x0A,W
02BA:  MULWF  x0B
02BC:  MOVF   FF3,W
02BE:  ADDWFC 00,W
02C0:  MOVWF  02
02C2:  MOVLB  0
02C4:  RETURN 0
*
0362:  MOVLB  5
0364:  BTFSC  x0A.7
0366:  BRA    0388
0368:  MOVLW  0F
036A:  MOVWF  00
036C:  SWAPF  x09,W
036E:  ANDWF  00,F
0370:  MOVLW  0A
0372:  SUBWF  00,W
0374:  BC    037C
0376:  MOVLW  30
0378:  ADDWF  00,F
037A:  BRA    0380
037C:  MOVF   x0A,W
037E:  ADDWF  00,F
0380:  MOVF   00,W
0382:  BTFSS  F9E.4
0384:  BRA    0382
0386:  MOVWF  FAD
0388:  MOVLW  0F
038A:  ANDWF  x09,F
038C:  MOVLW  0A
038E:  SUBWF  x09,W
0390:  BC    0396
0392:  MOVLW  30
0394:  BRA    039A
0396:  BCF    x0A.7
0398:  MOVF   x0A,W
039A:  ADDWF  x09,F
039C:  MOVF   x09,W
039E:  BTFSS  F9E.4
03A0:  BRA    039E
03A2:  MOVWF  FAD
03A4:  MOVLB  0
03A6:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #fuses HS 
.................... #use delay(clock=15MHz) 
*
004C:  MOVLW  05
004E:  MOVWF  FEA
0050:  MOVLW  0F
0052:  MOVWF  FE9
0054:  MOVF   FEF,W
0056:  BZ    0074
0058:  MOVLW  04
005A:  MOVWF  01
005C:  CLRF   00
005E:  DECFSZ 00,F
0060:  BRA    005E
0062:  DECFSZ 01,F
0064:  BRA    005C
0066:  MOVLW  DC
0068:  MOVWF  00
006A:  DECFSZ 00,F
006C:  BRA    006A
006E:  NOP   
0070:  DECFSZ FEF,F
0072:  BRA    0058
0074:  RETURN 0
.................... #use rs232(baud=9600,xmit=pin_c6,rcv=pin_c7) 
.................... #use i2c (master,scl=pin_c3,sda=pin_c4,force_hw,fast=100000) 
0076:  BCF    FC6.7
0078:  BCF    F9E.3
007A:  MOVFF  514,FC9
007E:  MOVLW  02
0080:  BTFSC  FC6.7
0082:  BRA    008E
0084:  BTFSS  F9E.3
0086:  BRA    0084
0088:  MOVLW  00
008A:  BTFSC  FC5.6
008C:  MOVLW  01
008E:  MOVWF  01
0090:  RETURN 0
*
02C6:  BCF    FC6.6
02C8:  BSF    FC5.3
02CA:  BTFSC  FC5.3
02CC:  BRA    02CA
02CE:  BTFSC  00.0
02D0:  BCF    FC5.5
02D2:  BTFSS  00.0
02D4:  BSF    FC5.5
02D6:  BSF    FC5.4
02D8:  BTFSC  FC5.4
02DA:  BRA    02D8
02DC:  MOVFF  FC9,01
02E0:  GOTO   02FA (RETURN)
....................  
.................... #include "i2c.c" 
.................... /* 
....................  * i2c.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #define latencia 10 
....................  
.................... int hand_shake(int addrDevice) { 
*
0092:  MOVLB  5
0094:  CLRF   x0E
....................  
.................... 	int ack = 0; 
....................  
.................... 	i2c_start(); 
0096:  BSF    FC5.0
0098:  BTFSC  FC5.0
009A:  BRA    0098
.................... 	ack = i2c_write(addrDevice); 
009C:  MOVFF  50D,514
00A0:  MOVLB  0
00A2:  RCALL  0076
00A4:  MOVFF  01,50E
.................... 	i2c_stop(); 
00A8:  BSF    FC5.2
00AA:  BTFSC  FC5.2
00AC:  BRA    00AA
....................  
.................... 	return !ack; 
00AE:  MOVLB  5
00B0:  MOVF   x0E,F
00B2:  BZ    00B8
00B4:  MOVLW  00
00B6:  BRA    00BA
00B8:  MOVLW  01
00BA:  MOVWF  01
00BC:  MOVLB  0
00BE:  GOTO   00E0 (RETURN)
.................... } 
....................  
.................... int send_i2c(int addrDevice, int addrMemory) { 
....................  
.................... 	int ack = 0; 
....................  
.................... 	i2c_start(); 
.................... 	ack = i2c_write(addrDevice); 
.................... 	i2c_write(addrMemory); 
.................... 	i2c_stop(); 
....................  
.................... 	return !ack; 
.................... } 
....................  
.................... int read_i2c(int addrDevice, int addrMemory) { 
*
02E4:  MOVLB  5
02E6:  CLRF   x13
....................  
.................... 	int recived = 0; 
....................  
.................... 	i2c_start(); 
02E8:  BSF    FC5.0
02EA:  BTFSC  FC5.0
02EC:  BRA    02EA
.................... 	i2c_write(addrDevice); 
02EE:  MOVFF  511,514
02F2:  MOVLB  0
02F4:  RCALL  0076
.................... 	recived = i2c_read(0); 
02F6:  CLRF   00
02F8:  BRA    02C6
02FA:  MOVFF  01,513
.................... 	i2c_stop(); 
02FE:  BSF    FC5.2
0300:  BTFSC  FC5.2
0302:  BRA    0300
....................  
.................... 	return recived; 
0304:  MOVLB  5
0306:  MOVFF  513,01
030A:  MOVLB  0
030C:  GOTO   0346 (RETURN)
.................... } 
....................  
.................... int scan(int *devices) { 
*
00C2:  MOVLB  5
00C4:  CLRF   x0A
00C6:  CLRF   x0B
00C8:  CLRF   x0C
....................  
.................... 	int cont = 0; 
.................... 	int ack = 0; 
.................... 	int found = 0; 
....................  
.................... 	for (cont = 0; cont < 254; cont += 2) { 
00CA:  CLRF   x0A
00CC:  MOVF   x0A,W
00CE:  SUBLW  FD
00D0:  BNC   0104
.................... 		delay_ms(latencia); 
00D2:  MOVLW  0A
00D4:  MOVWF  x0F
00D6:  MOVLB  0
00D8:  RCALL  004C
.................... 		if (hand_shake(cont)) { 
00DA:  MOVFF  50A,50D
00DE:  BRA    0092
00E0:  MOVF   01,F
00E2:  BZ    00FC
.................... 			devices[found++] = cont; 
00E4:  MOVLB  5
00E6:  MOVF   x0C,W
00E8:  INCF   x0C,F
00EA:  CLRF   03
00EC:  ADDWF  x08,W
00EE:  MOVWF  FE9
00F0:  MOVF   x09,W
00F2:  ADDWFC 03,W
00F4:  MOVWF  FEA
00F6:  MOVFF  50A,FEF
00FA:  MOVLB  0
.................... 		} 
00FC:  MOVLW  02
00FE:  MOVLB  5
0100:  ADDWF  x0A,F
0102:  BRA    00CC
.................... 	} 
....................  
.................... 	return found; 
0104:  MOVFF  50C,01
0108:  MOVLB  0
010A:  GOTO   03DE (RETURN)
.................... } 
....................  
.................... int get_registers(int addrDevice, int *regs) { 
*
0310:  MOVLB  5
0312:  CLRF   x0E
....................  
.................... 	int cont = 0; 
....................  
.................... 	for (cont = 0; cont < sizeof(regs); ++cont) { 
0314:  CLRF   x0E
0316:  MOVF   x0E,W
0318:  SUBLW  01
031A:  BNC   0358
.................... 		delay_ms(latencia); 
031C:  MOVLW  0A
031E:  MOVWF  x0F
0320:  MOVLB  0
0322:  RCALL  004C
.................... 		regs[cont] = read_i2c(addrDevice, cont); 
0324:  CLRF   03
0326:  MOVLB  5
0328:  MOVF   x0E,W
032A:  ADDWF  x0C,W
032C:  MOVWF  01
032E:  MOVF   x0D,W
0330:  ADDWFC 03,F
0332:  MOVFF  01,50F
0336:  MOVFF  03,510
033A:  MOVFF  50B,511
033E:  MOVFF  50E,512
0342:  MOVLB  0
0344:  BRA    02E4
0346:  MOVFF  510,FEA
034A:  MOVFF  50F,FE9
034E:  MOVFF  01,FEF
0352:  MOVLB  5
0354:  INCF   x0E,F
0356:  BRA    0316
.................... 	} 
....................  
.................... 	return cont; 
0358:  MOVFF  50E,01
035C:  MOVLB  0
035E:  GOTO   04A0 (RETURN)
.................... } 
....................  
.................... #include "mcp23017.c" 
.................... /* 
....................  * mcp23017.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... //endereco 
.................... #define mcp_r		0x40 
.................... #define mcp_w		0x41 
....................  
.................... #define iodira		0x00 
.................... #define iodirb		0x01 
.................... #define ipola		0x02 
.................... #define ipolb		0x03 
.................... #define gpintena	0x04 
.................... #define gpintenb	0x05 
.................... #define defvala		0x06 
.................... #define defvalb		0x07 
.................... #define intcona		0x08 
.................... #define intconb		0x09 
.................... #define iocon		0x0A 
.................... #define gppua		0x0C 
.................... #define gppub		0x0D 
.................... #define intfa		0x0E 
.................... #define intfb		0x0F 
.................... #define intcapa		0x10 
.................... #define intcapb		0x11 
.................... #define gpioa		0x12 
.................... #define gpiob		0x13 
.................... #define olata		0x14 
.................... #define olatb		0x15 
....................  
....................  
.................... #define qtdDevices	5 
.................... #define qtdRegs		255 
....................  
.................... int main(void) { 
*
03A8:  CLRF   FF8
03AA:  BCF    FD0.7
03AC:  MOVLW  61
03AE:  MOVWF  FAF
03B0:  MOVLW  A6
03B2:  MOVWF  FAC
03B4:  MOVLW  90
03B6:  MOVWF  FAB
03B8:  BSF    F94.3
03BA:  BSF    F94.4
03BC:  MOVLW  25
03BE:  MOVWF  FC8
03C0:  MOVLW  28
03C2:  MOVWF  FC6
03C4:  BSF    FC7.7
03C6:  BCF    FC7.6
03C8:  BSF    FC1.0
03CA:  BSF    FC1.1
03CC:  BSF    FC1.2
03CE:  BCF    FC1.3
03D0:  MOVLB  5
03D2:  CLRF   x05
....................  
.................... 	int devices[qtdDevices]; 
.................... 	int regs[qtdDevices][qtdRegs]; 
.................... 	int qtd = 0; 
.................... 	int cont; 
.................... 	int cont2; 
....................  
.................... 	qtd = scan(&devices); 
03D4:  CLRF   x09
03D6:  MOVLW  05
03D8:  MOVWF  x08
03DA:  MOVLB  0
03DC:  BRA    00C2
03DE:  MOVFF  01,505
....................  
.................... 	if (qtd > qtdDevices) { 
03E2:  MOVLB  5
03E4:  MOVF   x05,W
03E6:  SUBLW  05
03E8:  BC    0420
.................... 		printf("\n\rMuitos dispoisitivos %d\n\r", qtd); 
03EA:  MOVLW  04
03EC:  MOVWF  FF6
03EE:  MOVLW  00
03F0:  MOVWF  FF7
03F2:  MOVLW  17
03F4:  MOVWF  x09
03F6:  MOVLB  0
03F8:  RCALL  010E
03FA:  MOVFF  505,508
03FE:  MOVLW  18
0400:  MOVLB  5
0402:  MOVWF  x09
0404:  MOVLB  0
0406:  BRA    0164
0408:  MOVLW  0A
040A:  BTFSS  F9E.4
040C:  BRA    040A
040E:  MOVWF  FAD
0410:  MOVLW  0D
0412:  BTFSS  F9E.4
0414:  BRA    0412
0416:  MOVWF  FAD
.................... 		return 1; 
0418:  MOVLW  01
041A:  MOVWF  01
041C:  BRA    05A8
041E:  MOVLB  5
.................... 	} 
....................  
.................... 	printf("\n\rEncontrados %u\n\rDisp\t", qtd); 
0420:  MOVLW  20
0422:  MOVWF  FF6
0424:  MOVLW  00
0426:  MOVWF  FF7
0428:  MOVLW  0E
042A:  MOVWF  x09
042C:  MOVLB  0
042E:  RCALL  010E
0430:  MOVFF  505,508
0434:  MOVLW  1B
0436:  MOVLB  5
0438:  MOVWF  x09
043A:  MOVLB  0
043C:  BRA    0224
043E:  MOVLW  30
0440:  MOVWF  FF6
0442:  MOVLW  00
0444:  MOVWF  FF7
0446:  MOVLW  07
0448:  MOVLB  5
044A:  MOVWF  x09
044C:  MOVLB  0
044E:  RCALL  010E
....................  
.................... 	for (cont = 0; cont < qtd; ++cont) { 
0450:  MOVLB  5
0452:  CLRF   x06
0454:  MOVF   x05,W
0456:  SUBWF  x06,W
0458:  BC    04D8
.................... 		get_registers(devices[cont], regs[cont]); 
045A:  CLRF   03
045C:  MOVF   x06,W
045E:  ADDLW  05
0460:  MOVWF  FE9
0462:  MOVLW  00
0464:  ADDWFC 03,W
0466:  MOVWF  FEA
0468:  MOVFF  FEF,508
046C:  CLRF   x0A
046E:  MOVFF  506,509
0472:  CLRF   x0C
0474:  SETF   x0B
0476:  MOVLB  0
0478:  RCALL  02A4
047A:  MOVFF  02,03
047E:  MOVF   01,W
0480:  ADDLW  0A
0482:  MOVWF  01
0484:  MOVLW  00
0486:  ADDWFC 03,F
0488:  MOVFF  01,509
048C:  MOVFF  03,50A
0490:  MOVFF  508,50B
0494:  MOVFF  03,50D
0498:  MOVFF  01,50C
049C:  MOVLB  0
049E:  BRA    0310
.................... 		printf("  0x%x", devices[cont]); 
04A0:  CLRF   03
04A2:  MOVLB  5
04A4:  MOVF   x06,W
04A6:  ADDLW  05
04A8:  MOVWF  FE9
04AA:  MOVLW  00
04AC:  ADDWFC 03,W
04AE:  MOVWF  FEA
04B0:  MOVFF  FEF,508
04B4:  MOVLW  38
04B6:  MOVWF  FF6
04B8:  MOVLW  00
04BA:  MOVWF  FF7
04BC:  MOVLW  04
04BE:  MOVWF  x09
04C0:  MOVLB  0
04C2:  RCALL  010E
04C4:  MOVFF  508,509
04C8:  MOVLW  57
04CA:  MOVLB  5
04CC:  MOVWF  x0A
04CE:  MOVLB  0
04D0:  RCALL  0362
04D2:  MOVLB  5
04D4:  INCF   x06,F
04D6:  BRA    0454
.................... 	} 
....................  
.................... 	printf("\n\r"); 
04D8:  MOVLW  0A
04DA:  BTFSS  F9E.4
04DC:  BRA    04DA
04DE:  MOVWF  FAD
04E0:  MOVLW  0D
04E2:  BTFSS  F9E.4
04E4:  BRA    04E2
04E6:  MOVWF  FAD
....................  
.................... 	for (cont = 0; cont < qtdRegs; ++cont) { 
04E8:  CLRF   x06
04EA:  INCFSZ x06,W
04EC:  BRA    04F0
04EE:  BRA    05A2
.................... 		printf("reg 0x%x  ", cont); 
04F0:  MOVLW  40
04F2:  MOVWF  FF6
04F4:  MOVLW  00
04F6:  MOVWF  FF7
04F8:  MOVLW  06
04FA:  MOVWF  x09
04FC:  MOVLB  0
04FE:  RCALL  010E
0500:  MOVFF  506,509
0504:  MOVLW  57
0506:  MOVLB  5
0508:  MOVWF  x0A
050A:  MOVLB  0
050C:  RCALL  0362
050E:  MOVLW  20
0510:  BTFSS  F9E.4
0512:  BRA    0510
0514:  MOVWF  FAD
0516:  MOVLW  20
0518:  BTFSS  F9E.4
051A:  BRA    0518
051C:  MOVWF  FAD
.................... 		for (cont2 = 0; cont2 < qtd; ++cont2) 
051E:  MOVLB  5
0520:  CLRF   x07
0522:  MOVF   x05,W
0524:  SUBWF  x07,W
0526:  BC    058E
.................... 			printf("0x%x  ", regs[cont][cont2]); 
0528:  CLRF   x0A
052A:  MOVFF  506,509
052E:  CLRF   x0C
0530:  SETF   x0B
0532:  MOVLB  0
0534:  RCALL  02A4
0536:  MOVFF  02,509
053A:  MOVFF  01,508
053E:  MOVLB  5
0540:  MOVF   x07,W
0542:  ADDWF  01,W
0544:  MOVWF  01
0546:  MOVLW  00
0548:  ADDWFC 02,W
054A:  MOVWF  03
054C:  MOVF   01,W
054E:  ADDLW  0A
0550:  MOVWF  FE9
0552:  MOVLW  00
0554:  ADDWFC 03,W
0556:  MOVWF  FEA
0558:  MOVFF  FEF,508
055C:  MOVLW  30
055E:  BTFSS  F9E.4
0560:  BRA    055E
0562:  MOVWF  FAD
0564:  MOVLW  78
0566:  BTFSS  F9E.4
0568:  BRA    0566
056A:  MOVWF  FAD
056C:  MOVFF  508,509
0570:  MOVLW  57
0572:  MOVWF  x0A
0574:  MOVLB  0
0576:  RCALL  0362
0578:  MOVLW  20
057A:  BTFSS  F9E.4
057C:  BRA    057A
057E:  MOVWF  FAD
0580:  MOVLW  20
0582:  BTFSS  F9E.4
0584:  BRA    0582
0586:  MOVWF  FAD
0588:  MOVLB  5
058A:  INCF   x07,F
058C:  BRA    0522
.................... 		printf("\n\r"); 
058E:  MOVLW  0A
0590:  BTFSS  F9E.4
0592:  BRA    0590
0594:  MOVWF  FAD
0596:  MOVLW  0D
0598:  BTFSS  F9E.4
059A:  BRA    0598
059C:  MOVWF  FAD
059E:  INCF   x06,F
05A0:  BRA    04EA
.................... 	} 
....................  
.................... 	return 0; 
05A2:  MOVLW  00
05A4:  MOVWF  01
05A6:  MOVLB  0
....................  
.................... } 
05A8:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
