CCS PCH C Compiler, Version 5.008, 5967               10-fev-15 11:24

               Filename:   D:\Projetos\Expansor\expansor.lst

               ROM used:   564 bytes (2%)
                           Largest free fragment is 32204
               RAM used:   135 (9%) at main() level
                           140 (9%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   018E
.................... /* 
....................  * expansor.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
0004:  DATA 61,63
0006:  DATA 68,61
0008:  DATA 64,6F
000A:  DATA 20,30
000C:  DATA 78,25
000E:  DATA 78,0A
0010:  DATA 0D,00
0012:  DATA 56,61
0014:  DATA 73,63
0016:  DATA 75,6C
0018:  DATA 68,61
001A:  DATA 64,6F
001C:  DATA 73,20
001E:  DATA 25,75
0020:  DATA 0A,0D
0022:  DATA 00,00
*
0094:  TBLRD*+
0096:  MOVFF  FF6,89
009A:  MOVFF  FF7,8A
009E:  MOVF   FF5,W
00A0:  BTFSS  F9E.4
00A2:  BRA    00A0
00A4:  MOVWF  FAD
00A6:  MOVFF  89,FF6
00AA:  MOVFF  8A,FF7
00AE:  DECFSZ x88,F
00B0:  BRA    0094
00B2:  RETURN 0
00B4:  BTFSC  x88.7
00B6:  BRA    00D8
00B8:  MOVLW  0F
00BA:  MOVWF  00
00BC:  SWAPF  x87,W
00BE:  ANDWF  00,F
00C0:  MOVLW  0A
00C2:  SUBWF  00,W
00C4:  BC    00CC
00C6:  MOVLW  30
00C8:  ADDWF  00,F
00CA:  BRA    00D0
00CC:  MOVF   x88,W
00CE:  ADDWF  00,F
00D0:  MOVF   00,W
00D2:  BTFSS  F9E.4
00D4:  BRA    00D2
00D6:  MOVWF  FAD
00D8:  MOVLW  0F
00DA:  ANDWF  x87,F
00DC:  MOVLW  0A
00DE:  SUBWF  x87,W
00E0:  BC    00E6
00E2:  MOVLW  30
00E4:  BRA    00EA
00E6:  BCF    x88.7
00E8:  MOVF   x88,W
00EA:  ADDWF  x87,F
00EC:  MOVF   x87,W
00EE:  BTFSS  F9E.4
00F0:  BRA    00EE
00F2:  MOVWF  FAD
00F4:  GOTO   01EA (RETURN)
00F8:  MOVF   x8B,W
00FA:  CLRF   01
00FC:  SUBWF  x8A,W
00FE:  BC    0106
0100:  MOVFF  8A,00
0104:  BRA    011E
0106:  CLRF   00
0108:  MOVLW  08
010A:  MOVWF  x8C
010C:  RLCF   x8A,F
010E:  RLCF   00,F
0110:  MOVF   x8B,W
0112:  SUBWF  00,W
0114:  BTFSC  FD8.0
0116:  MOVWF  00
0118:  RLCF   01,F
011A:  DECFSZ x8C,F
011C:  BRA    010C
011E:  RETURN 0
0120:  MOVF   01,W
0122:  MOVFF  88,8A
0126:  MOVLW  64
0128:  MOVWF  x8B
012A:  RCALL  00F8
012C:  MOVFF  00,88
0130:  MOVF   01,W
0132:  MOVLW  30
0134:  BNZ   0144
0136:  BTFSS  x89.1
0138:  BRA    0154
013A:  BTFSC  x89.3
013C:  BRA    0154
013E:  BTFSC  x89.4
0140:  MOVLW  20
0142:  BRA    014A
0144:  BCF    x89.3
0146:  BCF    x89.4
0148:  BSF    x89.0
014A:  ADDWF  01,F
014C:  MOVF   01,W
014E:  BTFSS  F9E.4
0150:  BRA    014E
0152:  MOVWF  FAD
0154:  MOVFF  88,8A
0158:  MOVLW  0A
015A:  MOVWF  x8B
015C:  RCALL  00F8
015E:  MOVFF  00,88
0162:  MOVF   01,W
0164:  MOVLW  30
0166:  BNZ   0174
0168:  BTFSC  x89.3
016A:  BRA    017E
016C:  BTFSS  x89.0
016E:  BRA    017E
0170:  BTFSC  x89.4
0172:  MOVLW  20
0174:  ADDWF  01,F
0176:  MOVF   01,W
0178:  BTFSS  F9E.4
017A:  BRA    0178
017C:  MOVWF  FAD
017E:  MOVLW  30
0180:  ADDWF  x88,F
0182:  MOVF   x88,W
0184:  BTFSS  F9E.4
0186:  BRA    0184
0188:  MOVWF  FAD
018A:  GOTO   021E (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses HS 
.................... #use delay(clock=15MHz) 
*
0024:  CLRF   FEA
0026:  MOVLW  87
0028:  MOVWF  FE9
002A:  MOVF   FEF,W
002C:  BZ    004A
002E:  MOVLW  04
0030:  MOVWF  01
0032:  CLRF   00
0034:  DECFSZ 00,F
0036:  BRA    0034
0038:  DECFSZ 01,F
003A:  BRA    0032
003C:  MOVLW  DC
003E:  MOVWF  00
0040:  DECFSZ 00,F
0042:  BRA    0040
0044:  NOP   
0046:  DECFSZ FEF,F
0048:  BRA    002E
004A:  GOTO   01C8 (RETURN)
.................... #use rs232(baud=9600,xmit=pin_c6,rcv=pin_c7) 
.................... #use i2c (master,scl=pin_c3,sda=pin_c4,force_hw,fast=1000) 
004E:  BCF    FC6.7
0050:  BCF    F9E.3
0052:  MOVFF  89,FC9
0056:  MOVLW  02
0058:  BTFSC  FC6.7
005A:  BRA    0066
005C:  BTFSS  F9E.3
005E:  BRA    005C
0060:  MOVLW  00
0062:  BTFSC  FC5.6
0064:  MOVLW  01
0066:  MOVWF  01
0068:  GOTO   007A (RETURN)
....................  
.................... #include "i2c.c" 
.................... /* 
....................  * i2c.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... int hand_shake(int addrDevice) { 
006C:  CLRF   x88
.................... 	int ack = 0; 
....................  
.................... 	i2c_start(); 
006E:  BSF    FC5.0
0070:  BTFSC  FC5.0
0072:  BRA    0070
.................... 	ack = i2c_write(addrDevice); 
0074:  MOVFF  87,89
0078:  BRA    004E
007A:  MOVFF  01,88
.................... 	i2c_stop(); 
007E:  BSF    FC5.2
0080:  BTFSC  FC5.2
0082:  BRA    0080
....................  
.................... 	return !ack; 
0084:  MOVF   x88,F
0086:  BZ    008C
0088:  MOVLW  00
008A:  BRA    008E
008C:  MOVLW  01
008E:  MOVWF  01
0090:  GOTO   01CE (RETURN)
.................... } 
....................  
.................... int send_i2c(int addrDevice, int addrMemory) { 
.................... 	int ack = 0; 
....................  
.................... 	i2c_start(); 
.................... 	ack = i2c_write(addrDevice); 
.................... 	i2c_write(addrMemory); 
.................... 	i2c_stop(); 
....................  
.................... 	return ack; 
.................... } 
....................  
.................... int read_i2c(int addrDevice, int addrMemory) { 
....................  
.................... 	register int recived = 0; 
....................  
.................... 	i2c_start(); 
.................... 	i2c_write(addrDevice); 
.................... 	recived = i2c_read(0); 
.................... 	i2c_stop(); 
....................  
.................... 	return recived; 
.................... } 
....................  
.................... #include "mcp23017.c" 
.................... /* 
....................  * mcp23017.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... //endereco 
.................... #define mcp_r		0x40 
.................... #define mcp_w		0x41 
....................  
.................... #define iodira		0x00 
.................... #define iodirb		0x01 
.................... #define ipola		0x02 
.................... #define ipolb		0x03 
.................... #define gpintena	0x04 
.................... #define gpintenb	0x05 
.................... #define defvala		0x06 
.................... #define defvalb		0x07 
.................... #define intcona		0x08 
.................... #define intconb		0x09 
.................... #define iocon		0x0A 
.................... #define gppua		0x0C 
.................... #define gppub		0x0D 
.................... #define intfa		0x0E 
.................... #define intfb		0x0F 
.................... #define intcapa		0x10 
.................... #define intcapb		0x11 
.................... #define gpioa		0x12 
.................... #define gpiob		0x13 
.................... #define olata		0x14 
.................... #define olatb		0x15 
....................  
....................  
.................... int main(void) { 
*
018E:  CLRF   FF8
0190:  BCF    FD0.7
0192:  MOVLW  61
0194:  MOVWF  FAF
0196:  MOVLW  A6
0198:  MOVWF  FAC
019A:  MOVLW  90
019C:  MOVWF  FAB
019E:  BSF    F94.3
01A0:  BSF    F94.4
01A2:  MOVLW  7F
01A4:  MOVWF  FC8
01A6:  MOVLW  28
01A8:  MOVWF  FC6
01AA:  BSF    FC7.7
01AC:  BCF    FC7.6
01AE:  BSF    FC1.0
01B0:  BSF    FC1.1
01B2:  BSF    FC1.2
01B4:  BCF    FC1.3
01B6:  CLRF   05
01B8:  CLRF   06
....................  
.................... 	int cont = 0; 
.................... 	int ack = 0; 
.................... 	int achados; 
.................... 	int reg[127]; 
....................  
.................... 	for (cont = 0; cont < 254; cont += 2) { 
01BA:  CLRF   05
01BC:  MOVF   05,W
01BE:  SUBLW  FD
01C0:  BNC   0200
.................... 		delay_ms(10); 
01C2:  MOVLW  0A
01C4:  MOVWF  x87
01C6:  BRA    0024
.................... 		if (hand_shake(cont)) { 
01C8:  MOVFF  05,87
01CC:  BRA    006C
01CE:  MOVF   01,F
01D0:  BZ    01FA
.................... 			printf("achado 0x%x\n\r", cont); 
01D2:  MOVLW  04
01D4:  MOVWF  FF6
01D6:  MOVLW  00
01D8:  MOVWF  FF7
01DA:  MOVLW  09
01DC:  MOVWF  x88
01DE:  RCALL  0094
01E0:  MOVFF  05,87
01E4:  MOVLW  57
01E6:  MOVWF  x88
01E8:  BRA    00B4
01EA:  MOVLW  0A
01EC:  BTFSS  F9E.4
01EE:  BRA    01EC
01F0:  MOVWF  FAD
01F2:  MOVLW  0D
01F4:  BTFSS  F9E.4
01F6:  BRA    01F4
01F8:  MOVWF  FAD
.................... 		} 
01FA:  MOVLW  02
01FC:  ADDWF  05,F
01FE:  BRA    01BC
.................... 	} 
....................  
.................... 	printf("Vasculhados %u\n\r", cont / 2); 
0200:  BCF    FD8.0
0202:  RRCF   05,W
0204:  MOVWF  x87
0206:  MOVLW  12
0208:  MOVWF  FF6
020A:  MOVLW  00
020C:  MOVWF  FF7
020E:  MOVLW  0C
0210:  MOVWF  x88
0212:  RCALL  0094
0214:  MOVFF  87,88
0218:  MOVLW  1B
021A:  MOVWF  x89
021C:  BRA    0120
021E:  MOVLW  0A
0220:  BTFSS  F9E.4
0222:  BRA    0220
0224:  MOVWF  FAD
0226:  MOVLW  0D
0228:  BTFSS  F9E.4
022A:  BRA    0228
022C:  MOVWF  FAD
....................  
.................... 	return 0; 
022E:  MOVLW  00
0230:  MOVWF  01
.................... } 
0232:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
