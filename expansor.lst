CCS PCH C Compiler, Version 5.008, 5967               13-fev-15 14:57

               Filename:   D:\Projetos\Expansor\expansor.lst

               ROM used:   630 bytes (2%)
                           Largest free fragment is 32138
               RAM used:   7 (0%) at main() level
                           11 (1%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   015A
.................... /* 
....................  * expansor.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
0004:  DATA 0A,0D
0006:  DATA 4D,75
0008:  DATA 69,74
000A:  DATA 6F,73
000C:  DATA 20,64
000E:  DATA 69,73
0010:  DATA 70,6F
0012:  DATA 69,73
0014:  DATA 69,74
0016:  DATA 69,76
0018:  DATA 6F,73
001A:  DATA 20,25
001C:  DATA 64,0A
001E:  DATA 0D,00
0020:  DATA 0A,0D
0022:  DATA 45,6E
0024:  DATA 63,6F
0026:  DATA 6E,74
0028:  DATA 72,61
002A:  DATA 64,6F
002C:  DATA 73,20
002E:  DATA 25,75
0030:  DATA 0A,0D
0032:  DATA 44,69
0034:  DATA 73,70
0036:  DATA 09,00
0038:  DATA 20,20
003A:  DATA 30,78
003C:  DATA 25,78
003E:  DATA 00,00
0040:  DATA 72,65
0042:  DATA 67,20
0044:  DATA 30,78
0046:  DATA 25,78
0048:  DATA 20,20
004A:  DATA 00,00
*
00BC:  BTFSC  09.7
00BE:  BRA    00E0
00C0:  MOVLW  0F
00C2:  MOVWF  00
00C4:  SWAPF  08,W
00C6:  ANDWF  00,F
00C8:  MOVLW  0A
00CA:  SUBWF  00,W
00CC:  BC    00D4
00CE:  MOVLW  30
00D0:  ADDWF  00,F
00D2:  BRA    00D8
00D4:  MOVF   09,W
00D6:  ADDWF  00,F
00D8:  MOVF   00,W
00DA:  BTFSS  F9E.4
00DC:  BRA    00DA
00DE:  MOVWF  FAD
00E0:  MOVLW  0F
00E2:  ANDWF  08,F
00E4:  MOVLW  0A
00E6:  SUBWF  08,W
00E8:  BC    00EE
00EA:  MOVLW  30
00EC:  BRA    00F2
00EE:  BCF    09.7
00F0:  MOVF   09,W
00F2:  ADDWF  08,F
00F4:  MOVF   08,W
00F6:  BTFSS  F9E.4
00F8:  BRA    00F6
00FA:  MOVWF  FAD
00FC:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #fuses HS 
.................... #use delay(clock=15MHz) 
*
0130:  CLRF   FEA
0132:  MOVLW  08
0134:  MOVWF  FE9
0136:  MOVF   FEF,W
0138:  BZ    0156
013A:  MOVLW  04
013C:  MOVWF  01
013E:  CLRF   00
0140:  DECFSZ 00,F
0142:  BRA    0140
0144:  DECFSZ 01,F
0146:  BRA    013E
0148:  MOVLW  DC
014A:  MOVWF  00
014C:  DECFSZ 00,F
014E:  BRA    014C
0150:  NOP   
0152:  DECFSZ FEF,F
0154:  BRA    013A
0156:  GOTO   0264 (RETURN)
.................... #use rs232(baud=9600,xmit=pin_c6,rcv=pin_c7) 
.................... #use i2c (master,scl=pin_c3,sda=pin_c4,force_hw,fast=100000) 
*
004C:  BCF    FC6.7
004E:  BCF    F9E.3
0050:  MOVFF  0B,FC9
0054:  MOVLW  02
0056:  BTFSC  FC6.7
0058:  BRA    0064
005A:  BTFSS  F9E.3
005C:  BRA    005A
005E:  MOVLW  00
0060:  BTFSC  FC5.6
0062:  MOVLW  01
0064:  MOVWF  01
0066:  RETURN 0
0068:  BCF    FC6.6
006A:  BSF    FC5.3
006C:  BTFSC  FC5.3
006E:  BRA    006C
0070:  BTFSC  00.0
0072:  BCF    FC5.5
0074:  BTFSS  00.0
0076:  BSF    FC5.5
0078:  BSF    FC5.4
007A:  BTFSC  FC5.4
007C:  BRA    007A
007E:  MOVFF  FC9,01
0082:  GOTO   00AC (RETURN)
....................  
.................... #include "i2c.c" 
.................... /* 
....................  * i2c.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #define latencia	10 
.................... #define qtdDevices	5 
.................... #define qtdRegs		255 
....................  
.................... int hand_shake(int addrDevice) { 
....................  
.................... 	int ack = 0; 
....................  
.................... 	i2c_start(); 
.................... 	ack = i2c_write(addrDevice); 
.................... 	i2c_stop(); 
....................  
.................... 	return !ack; 
.................... } 
....................  
.................... int write_i2c(int addrDevice, int addrMemory, int value) { 
*
00FE:  CLRF   0A
....................  
.................... 	int ack = 0; 
....................  
.................... 	i2c_start(); 
0100:  BSF    FC5.0
0102:  BTFSC  FC5.0
0104:  BRA    0102
.................... 	ack = i2c_write(addrDevice); 
0106:  MOVFF  07,0B
010A:  RCALL  004C
010C:  MOVFF  01,0A
.................... 	i2c_write(addrMemory); 
0110:  MOVFF  08,0B
0114:  RCALL  004C
.................... 	i2c_write(value); 
0116:  MOVFF  09,0B
011A:  RCALL  004C
.................... 	i2c_stop(); 
011C:  BSF    FC5.2
011E:  BTFSC  FC5.2
0120:  BRA    011E
....................  
.................... 	return !ack; 
0122:  MOVF   0A,F
0124:  BZ    012A
0126:  MOVLW  00
0128:  BRA    012C
012A:  MOVLW  01
012C:  MOVWF  01
012E:  RETURN 0
.................... } 
....................  
.................... int read_i2c(int addrDevice, int addrMemory) { 
....................  
.................... 	int leitura; 
....................  
.................... 	i2c_start(); 
*
0086:  BSF    FC5.0
0088:  BTFSC  FC5.0
008A:  BRA    0088
.................... 	i2c_write(addrDevice); 
008C:  MOVFF  07,0B
0090:  RCALL  004C
.................... 	i2c_write(addrMemory); 
0092:  MOVFF  08,0B
0096:  RCALL  004C
.................... 	i2c_start(); 
0098:  BSF    FC5.1
009A:  BTFSC  FC5.1
009C:  BRA    009A
.................... 	i2c_write(addrDevice + 1); 
009E:  MOVLW  01
00A0:  ADDWF  07,W
00A2:  MOVWF  0A
00A4:  MOVWF  0B
00A6:  RCALL  004C
.................... 	leitura = i2c_read(0); 
00A8:  CLRF   00
00AA:  BRA    0068
00AC:  MOVFF  01,09
.................... 	i2c_stop(); 
00B0:  BSF    FC5.2
00B2:  BTFSC  FC5.2
00B4:  BRA    00B2
....................  
.................... 	return leitura; 
00B6:  MOVFF  09,01
00BA:  RETURN 0
.................... } 
....................  
.................... int scan(int *devices) { 
....................  
.................... 	int cont = 0; 
.................... 	int ack = 0; 
.................... 	int found = 0; 
....................  
.................... 	for (cont = 0; cont < 254; cont += 2) { 
.................... 		delay_ms(latencia); 
.................... 		if (hand_shake(cont)) { 
.................... 			devices[found++] = cont; 
.................... 		} 
.................... 	} 
....................  
.................... 	return found; 
.................... } 
....................  
.................... int get_registers(int addrDevice, int *regs) { 
....................  
.................... 	int cont = 0; 
....................  
.................... 	for (cont = 0; cont < sizeof(regs); ++cont) 
.................... 		regs[cont] = read_i2c(addrDevice, cont); 
....................  
.................... 	return cont; 
.................... } 
....................  
.................... int imprime_mapa(void) { 
....................  
.................... 	int devices[qtdDevices]; 
.................... 	int regs[qtdDevices][qtdRegs]; 
.................... 	int qtd = 0; 
.................... 	int cont; 
.................... 	int cont2; 
....................  
.................... 	qtd = scan(&devices); 
....................  
.................... 	if (qtd > qtdDevices) { 
.................... 		printf("\n\rMuitos dispoisitivos %d\n\r", qtd); 
.................... 		return 1; 
.................... 	} 
....................  
.................... 	printf("\n\rEncontrados %u\n\rDisp\t", qtd); 
....................  
.................... 	for (cont = 0; cont < qtd; ++cont) { 
.................... 		get_registers(devices[cont], regs[cont]); 
.................... 		printf("  0x%x", devices[cont]); 
.................... 	} 
....................  
.................... 	printf("\n\r"); 
....................  
.................... 	for (cont = 0; cont < qtdRegs; ++cont) { 
.................... 		printf("reg 0x%x  ", cont); 
.................... 		for (cont2 = 0; cont2 < qtd; ++cont2) 
.................... 			printf("0x%x  ", regs[cont][cont2]); 
.................... 		printf("\n\r"); 
.................... 	} 
....................  
.................... 	return 0; 
.................... } 
....................  
.................... #include "mcp23017.c" 
.................... /* 
....................  * mcp23017.c 
....................  * 
....................  *  Created on: 09/02/2015 
....................  *      Author: cuki 
....................  */ 
....................  
.................... //endereco 
.................... #define mcp_r		0x40 
.................... #define mcp_w		0x41 
....................  
.................... #define iodira		0x00 
.................... #define iodirb		0x01 
.................... #define ipola		0x02 
.................... #define ipolb		0x03 
.................... #define gpintena	0x04 
.................... #define gpintenb	0x05 
.................... #define defvala		0x06 
.................... #define defvalb		0x07 
.................... #define intcona		0x08 
.................... #define intconb		0x09 
.................... #define iocon		0x0A 
.................... #define gppua		0x0C 
.................... #define gppub		0x0D 
.................... #define intfa		0x0E 
.................... #define intfb		0x0F 
.................... #define intcapa		0x10 
.................... #define intcapb		0x11 
.................... #define gpioa		0x12 
.................... #define gpiob		0x13 
.................... #define olata		0x14 
.................... #define olatb		0x15 
....................  
....................  
.................... int main(void) { 
*
015A:  CLRF   FF8
015C:  BCF    FD0.7
015E:  MOVLW  61
0160:  MOVWF  FAF
0162:  MOVLW  A6
0164:  MOVWF  FAC
0166:  MOVLW  90
0168:  MOVWF  FAB
016A:  BSF    F94.3
016C:  BSF    F94.4
016E:  MOVLW  25
0170:  MOVWF  FC8
0172:  MOVLW  28
0174:  MOVWF  FC6
0176:  BSF    FC7.7
0178:  BCF    FC7.6
017A:  BSF    FC1.0
017C:  BSF    FC1.1
017E:  BSF    FC1.2
0180:  BCF    FC1.3
0182:  CLRF   05
0184:  MOVLW  40
0186:  MOVWF  07
0188:  CLRF   08
018A:  RCALL  0086
018C:  MOVFF  01,06
....................  
.................... 	int i = 0; 
....................  
.................... 	int iodir = read_i2c(mcp_r, iodira); 
.................... 	printf("0x%x\n\r", read_i2c(mcp_r, iodira)); 
0190:  MOVLW  40
0192:  MOVWF  07
0194:  CLRF   08
0196:  RCALL  0086
0198:  MOVFF  01,07
019C:  MOVLW  30
019E:  BTFSS  F9E.4
01A0:  BRA    019E
01A2:  MOVWF  FAD
01A4:  MOVLW  78
01A6:  BTFSS  F9E.4
01A8:  BRA    01A6
01AA:  MOVWF  FAD
01AC:  MOVFF  07,08
01B0:  MOVLW  57
01B2:  MOVWF  09
01B4:  RCALL  00BC
01B6:  MOVLW  0A
01B8:  BTFSS  F9E.4
01BA:  BRA    01B8
01BC:  MOVWF  FAD
01BE:  MOVLW  0D
01C0:  BTFSS  F9E.4
01C2:  BRA    01C0
01C4:  MOVWF  FAD
....................  
.................... 	if (iodir == 0xFF) 
01C6:  INCFSZ 06,W
01C8:  BRA    01D4
.................... 		write_i2c(mcp_r, iodira, 0x00); 
01CA:  MOVLW  40
01CC:  MOVWF  07
01CE:  CLRF   08
01D0:  CLRF   09
01D2:  RCALL  00FE
.................... 	printf("0x%x\n\r", read_i2c(mcp_r, iodira)); 
01D4:  MOVLW  40
01D6:  MOVWF  07
01D8:  CLRF   08
01DA:  RCALL  0086
01DC:  MOVFF  01,07
01E0:  MOVLW  30
01E2:  BTFSS  F9E.4
01E4:  BRA    01E2
01E6:  MOVWF  FAD
01E8:  MOVLW  78
01EA:  BTFSS  F9E.4
01EC:  BRA    01EA
01EE:  MOVWF  FAD
01F0:  MOVFF  07,08
01F4:  MOVLW  57
01F6:  MOVWF  09
01F8:  RCALL  00BC
01FA:  MOVLW  0A
01FC:  BTFSS  F9E.4
01FE:  BRA    01FC
0200:  MOVWF  FAD
0202:  MOVLW  0D
0204:  BTFSS  F9E.4
0206:  BRA    0204
0208:  MOVWF  FAD
....................  
.................... 	while (true) { 
.................... 		for (i = 1; i != 8; i <<= 1) { 
020A:  MOVLW  01
020C:  MOVWF  05
020E:  MOVF   05,W
0210:  SUBLW  08
0212:  BZ    026E
.................... 			write_i2c(mcp_r, gpioa, i); 
0214:  MOVLW  40
0216:  MOVWF  07
0218:  MOVLW  12
021A:  MOVWF  08
021C:  MOVFF  05,09
0220:  RCALL  00FE
.................... 			printf("0x%x\n\r", read_i2c(mcp_r, gpioa)); 
0222:  MOVLW  40
0224:  MOVWF  07
0226:  MOVLW  12
0228:  MOVWF  08
022A:  RCALL  0086
022C:  MOVFF  01,07
0230:  MOVLW  30
0232:  BTFSS  F9E.4
0234:  BRA    0232
0236:  MOVWF  FAD
0238:  MOVLW  78
023A:  BTFSS  F9E.4
023C:  BRA    023A
023E:  MOVWF  FAD
0240:  MOVFF  07,08
0244:  MOVLW  57
0246:  MOVWF  09
0248:  RCALL  00BC
024A:  MOVLW  0A
024C:  BTFSS  F9E.4
024E:  BRA    024C
0250:  MOVWF  FAD
0252:  MOVLW  0D
0254:  BTFSS  F9E.4
0256:  BRA    0254
0258:  MOVWF  FAD
.................... 			delay_ms(1000); 
025A:  MOVLW  04
025C:  MOVWF  07
025E:  MOVLW  FA
0260:  MOVWF  08
0262:  BRA    0130
0264:  DECFSZ 07,F
0266:  BRA    025E
0268:  BCF    FD8.0
026A:  RLCF   05,F
026C:  BRA    020E
.................... 		} 
026E:  BRA    020A
....................  
.................... 	} 
....................  
.................... 	return 0; 
0270:  MOVLW  00
0272:  MOVWF  01
....................  
.................... } 
0274:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
